package com.tanomatics.java.ml.clustering;


import java.util.Random;

import com.tanomatics.java.ml.core.Dataset;
import com.tanomatics.java.ml.tools.Distance;

/**
 * A Class for K-means Clustering (See <a href=http://people.revoledu.com/kardi/tutorial/kMean/index.html> 
 * Kardi Teknomo</a> and <a href= http://home.dei.polimi.it/matteucc/Clustering/tutorial_html/kmeans.html> 
 * Clustering Algorithms</a>
 * @author yanuwid
 * @version 1.0 
 */
public class KMeans implements IClusterer {
	
	private int K;
	private int D;
	private int cluster;
	private int[] solutions;
	private float[][] dataMatrix;
	private float[][] c ;
	private Dataset dataset;
	private boolean isStillMoving;
	private Centroids centroids;
	private float TWCV;
	

	/**
	 * @param k the number of cluster
	 * @param dataset the data to be executed
	 */
	public KMeans(int k, Dataset dataset){
		this.dataset  = dataset;
		K        	  = k;
		D    		  = dataset.get(0).length;
		isStillMoving = true;
		solutions   = new int[dataset.size()];
		dataMatrix    = new float[D][dataset.size()];
	}
	
	public void doClustering(){
		for(int i = 0; i < dataset.size(); i++){
			for(int j = 0; j < D ; j ++){
				dataMatrix[j][i] = dataset.get(i)[j];
			}
		}
		setCentroid(K);
		while(isStillMoving){
			isStillMoving = false;
			assignToClosestCentroid();		
			recalculateCentroid();

			int[] hasil = getResults();
			for(int index = 0; index < hasil.length; index++){
				System.out.print(hasil[index]);
			}
			System.out.println(": twcv="+TWCV);
		} 
	}
	
	private void setCentroid(int k){
		Random random = new Random();
		c = new float[k][D]; 
		for(int i = 0; i < k ; i++){
			for(int j = 0; j < D ; j++){
				c[i][j] =  random.nextFloat() * dataset.maxValue();
			}
		}
	}
	
	
	private void assignToClosestCentroid(){
		for(int i = 0 ; i < dataset.size() ; i ++){
			double minDistance = Float.MAX_VALUE;
			cluster = 0;
			for(int j =0; j < K; j++){
				double d = Distance.getDistance(dataset.get(i), c[j]);
				if(d < minDistance) {
					minDistance = d;
					cluster = j;
				}
			}
			
			if(solutions[i] != cluster){
				solutions[i] = cluster;
				isStillMoving = true;
			} 
		}
	}
	
	private void recalculateCentroid(){
		centroids = new Centroids(dataset,solutions,K);
		double[][] cTemp = centroids.getCentroids();
		for(int i = 0; i < cTemp.length; i++){
			for(int j = 0; j < cTemp[i].length; j++){
				c[i][j] = (float) cTemp[i][j];
			}
		}
		TWCV = (float) centroids.getTWCV();
	}
	
	public int[] getResults(){
		return solutions;
	}
	
	public int getResults(int index){
		return solutions[index];
	}
	
	public float[] getCentroid(int index){
		return c[index];
	}

	public static void main(String[] args){
		
		Dataset dataset = new Dataset();
		//float[] a = {1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1};
		//float[] b = {1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,1,2,0,0,0,1,0,0,1,2,4,0,0,0,0,0,0,1,2};
		//float[] c = {2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,1,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,1};
		//float[] d = {2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,1,2,4,0,0,0,0,0,0,2,2};
		
		//cluster 1
		//float[] e = {8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,1,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,1};
		//float[] f = {8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,8,2,0,0,0,8,0,0,1,2,4,0,0,0,0,0,0,8,2};
		//float[] g = {9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,1,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,1};
		//float[] h = {9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,9,2,0,0,0,9,0,0,1,2,4,0,0,0,0,0,0,9,2};
		
		//cluster 2
		//float[] i = {4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,6,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,6};
		//float[] j = {4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,4,7,0,0,0,4,0,0,1,2,4,0,0,0,0,0,0,4,7};
		//float[] k = {5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,6,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,6};
		//float[] l = {5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,5,7,0,0,0,5,0,0,1,2,4,0,0,0,0,0,0,5,7};

		float[] a = {1,1};
		float[] b = {1,2};
		float[] c = {2,1};
		float[] d = {2,2};
		
		float[] e = {3,1};
		float[] f = {3,2};
		float[] g = {4,1};
		float[] h = {4,2};
		
		float[] i = {5,1};
		float[] j = {5,2};
		float[] k = {6,1};
		float[] l = {6,2};
		
		dataset.add(a);
		dataset.add(b);
		dataset.add(c);
		dataset.add(d);
		dataset.add(e);
		dataset.add(f);
		dataset.add(g);
		dataset.add(h);
		dataset.add(i);
		dataset.add(j);
		dataset.add(k);
		dataset.add(l);
		
		KMeans km = new KMeans(3,dataset);
		km.doClustering();
	}
}